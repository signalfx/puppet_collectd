# Generated by Puppet
LoadPlugin match_regex

<Chain "PostCache">
  <Rule>
    <Match regex>
      Plugin "^cpu$"
    </Match>
    <Target write>
      Plugin "aggregation"
      Plugin "python.signalfx_metadata"
    </Target>
    Target stop
  </Rule>

<%- if @filter_default_metrics == true -%>

  <%- @filter_default_metric_rules.each do |plugin, rules| -%>
  <Rule>
    <Match "regex">
      Plugin "^<%= plugin %>$"
    </Match>
    <Target "jump">
      Chain "Filter<%= plugin %>Stats"
    </Target>
  </Rule>
  <%- end -%>

<%- else -%>

  <Rule "FilterOutExcessiveVmemData">
    <Match "regex">
      Plugin '^vmem$'
    </Match>
    <Target "jump">
      Chain "VmemFilters"
    </Target>
  </Rule>

<%- end -%>

  Target write
</Chain>


<%- if @filter_default_metrics == true -%>

<%- @filter_default_metric_rules.each do |plugin, rules| -%>
<Chain "Filter<%= plugin %>Stats">
<%- rules.each do |rule_instance, rule| -%>
    <Rule "<%= rule_instance -%>">
      <Match "regex">
      <%- rule.sort_by { |k| k }.each do |key,value| -%>
        <%- if key != "Type" -%>
        <%= key -%> "<%= value %>"
	<%- else -%>
        <%= key -%> "^<%= value %>$"
	<%- end -%>
      <%- end -%>
      </Match>
      Target "return"
    </Rule>
<%- end -%>
  Target "stop"
</Chain>
<%- end -%>

<%- else -%>

<Chain "VmemFilters">
  <Rule "vmem_filtering_accept_whitelisted_vmpage_faults">
    <Match "regex">
      Type 'vmpage_faults'
    </Match>
    Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_io">
    <Match "regex">
      Type 'vmpage_io'
    </Match>
    Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_number_free_pages">
    <Match "regex">
      Type 'vmpage_number'
      TypeInstance 'free_pages'
    </Match>
  Target "return"
  </Rule>

  <Rule "vmem_filtering_accept_whitelisted_vmpage_number_mapped">
    <Match "regex">
      Type 'vmpage_number'
      TypeInstance 'mapped'
    </Match>
    Target "return"
  </Rule>

  Target "stop"
</Chain>

<%- end -%>
