# Install:
#   This requires the python plugin. It is sometimes installed with collectd
#   but not always.  You can install it with:
#
#     apt-get install collectd-python
#
#   Install the collectd plugin from github:
#
#     git clone https://github.com/signalfx/collectd-rabbitmq.git /opt/collectd-rabbitmq
#
# Documentation:
#   https://github.com/signalfx/collectd-rabbitmq/blob/master/README.md
#
# System modifications:
#   None
#
# Config file modifications:
#   Change the Username, Password, Host, and Port settings to match your
#   RabbitMQ installation.
#   Optionally, change any of the Collect* settings to false to disable
#   their collection.
#
#   The optional setting HTTPTimeout will set a timeout value (in seconds) for
#   connecting to the RabbitMQ Management API. Defaults to 60 seconds.
#
#   The optional setting VerbosityLevel controls the quantity of RabbitMQ
#   metrics collected.
#       "info": Only the most commonly-used metrics are collected
#       "debug": Additonal metrics useful for debugging are collected
#       "trace": All available metrics are collected
#   Defaults to "info".

LoadPlugin python
<Plugin python>
  ModulePath "/opt/collectd-rabbitmq"

  Import rabbitmq

  <% @modules.each do |instance,config| -%>
    <Module rabbitmq>
    <% config.sort_by { |k| k }.each do |key,value| -%>
    <%= key -%> <%= value %>
    <% end -%>
  </Module>
  <% end -%>
</Plugin>

<%- if @filter_metrics == true -%>
LoadPlugin match_regex
<Chain "PostCache">
  <Rule>
    <Match "regex">
      Plugin "^rabbitmq$"
    </Match>
    <Target "jump">
      Chain "FilterRabbitMQStats"
    </Target>
  </Rule>
  Target "write"
</Chain>

<Chain "FilterRabbitMQStats">
<%- @filter_metric_rules.each do |rule_instance, rule| -%>
    <Rule "<%= rule_instance -%>">
      <Match "regex">
      <%- rule.sort_by { |k| k }.each do |key,value| -%>
        <%- if key != "Type" -%>
        <%= key -%> "<%= value %>"
	<%- else -%>
        <%= key -%> "^<%= value %>$"
	<%- end -%>
      <%- end -%>
      </Match>
      Target "return"
    </Rule>
<%- end -%>
  Target "stop"
</Chain>
<%- end -%>
